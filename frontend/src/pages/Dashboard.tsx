import React, { useState, useEffect } from "react";
import {
  Toolbar,
  Typography,
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Button,
  Box,
  TextField,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper,
} from "@mui/material";
import {
  Dashboard as DashboardIcon,
  AccountCircle as ProfileIcon,
  ExitToApp as SignOutIcon,
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
} from "@mui/icons-material";
import { format } from "date-fns";

interface Incident {
  id: number;
  name: string;
  description: string;
  priority: "low" | "medium" | "high" | "critical";
  status: "open" | "inprogress" | "resolved" | "closed";
  date: string; // Date is auto-generated by backend
  reportedBy: string;
  assignedTo?: string;
}

const Dashboard: React.FC = () => {
  const [incidents, setIncidents] = useState<Incident[]>([]);
  const [filteredIncidents, setFilteredIncidents] = useState<Incident[]>([]);
  const [search, setSearch] = useState<string>("");

  // State for Modals
  const [openModal, setOpenModal] = useState<boolean>(false);
  const [editModal, setEditModal] = useState<boolean>(false);
  const [deleteDialog, setDeleteDialog] = useState<boolean>(false);
  const [selectedIncident, setSelectedIncident] = useState<Incident | null>(null);

  // Incident form state (no "date" field since it's auto-generated)
  const [formData, setFormData] = useState<Omit<Incident, "id" | "date">>({
    name: "",
    description: "",
    priority: "low",
    status: "open",
    reportedBy: "",
    assignedTo: "",
  });

  // Simulate data fetching
  useEffect(() => {
    const fakeData: Incident[] = [
      {
        id: 1,
        name: "Network Issue",
        description: "Internet is not working on floor 2.",
        priority: "high",
        status: "open",
        date: "2024-12-10T13:22:44.397Z",
        reportedBy: "User 123",
        assignedTo: "Technician 456",
      },
      {
        id: 2,
        name: "Server Down",
        description: "Main server crashed.",
        priority: "critical",
        status: "inprogress",
        date: "2024-12-09T09:45:00.000Z",
        reportedBy: "User 124",
      },
    ];
    setIncidents(fakeData);
    setFilteredIncidents(fakeData);
  }, []);

  // Search functionality
  useEffect(() => {
    const filtered = incidents.filter((incident) =>
      incident.name.toLowerCase().includes(search.toLowerCase())
    );
    setFilteredIncidents(filtered);
  }, [search, incidents]);

  // Handle Create/Edit Modal submission
  const handleSubmit = () => {
    if (editModal && selectedIncident) {
      // Edit existing incident
      const updatedIncidents = incidents.map((inc) =>
        inc.id === selectedIncident.id ? { ...selectedIncident, ...formData } : inc
      );
      setIncidents(updatedIncidents);
    } else {
      // Create new incident
      const newIncident: Incident = {
        ...formData,
        id: incidents.length + 1,
        date: new Date().toISOString(), // Simulate backend date
      };
      setIncidents([...incidents, newIncident]);
    }
    handleCloseModals();
  };

  const handleDelete = () => {
    if (selectedIncident) {
      const updatedIncidents = incidents.filter(
        (inc) => inc.id !== selectedIncident.id
      );
      setIncidents(updatedIncidents);
    }
    setDeleteDialog(false);
  };

  const handleOpenEdit = (incident: Incident) => {
    setSelectedIncident(incident);
    setFormData({
      name: incident.name,
      description: incident.description,
      priority: incident.priority,
      status: incident.status,
      reportedBy: incident.reportedBy,
      assignedTo: incident.assignedTo || "",
    });
    setEditModal(true);
  };

  const handleCloseModals = () => {
    setOpenModal(false);
    setEditModal(false);
    setDeleteDialog(false);
    setSelectedIncident(null);
    setFormData({
      name: "",
      description: "",
      priority: "low",
      status: "open",
      reportedBy: "",
      assignedTo: "",
    });
  };

  return (
    <Box sx={{ display: "flex" }}>
      {/* Sidebar */}
      <Drawer variant="permanent">
        <Toolbar />
        <List>
          <ListItem>
            <img
              src="/logo.png" // Replace with your logo path
              alt="Fixit App"
              width="30"
              style={{ marginRight: 10 }}
            />
            <Typography variant="h6">Fixit App</Typography>
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <DashboardIcon />
            </ListItemIcon>
            <ListItemText primary="Dashboard" />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <ProfileIcon />
            </ListItemIcon>
            <ListItemText primary="Profile" />
          </ListItem>
          <ListItem>
            <ListItemIcon>
              <SignOutIcon />
            </ListItemIcon>
            <ListItemText primary="Sign Out" />
          </ListItem>
        </List>
      </Drawer>

      {/* Main Content */}
      <Box sx={{ flexGrow: 1, p: 3 }}>
        <Typography variant="h4" gutterBottom>
          Incidentes
        </Typography>

        <Box sx={{ display: "flex", justifyContent: "space-between", mb: 2 }}>
          <TextField
            label="Buscar por nombre"
            variant="outlined"
            size="small"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
          <Button
            variant="contained"
            color="primary"
            startIcon={<AddIcon />}
            onClick={() => setOpenModal(true)}
          >
            Crear Incidente
          </Button>
        </Box>

        <Paper>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Nombre</TableCell>
                <TableCell>Descripción</TableCell>
                <TableCell>Prioridad</TableCell>
                <TableCell>Estado</TableCell>
                <TableCell>Fecha</TableCell>
                <TableCell>Acciones</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredIncidents.map((incident) => (
                <TableRow key={incident.id}>
                  <TableCell>{incident.name}</TableCell>
                  <TableCell>{incident.description}</TableCell>
                  <TableCell>{incident.priority}</TableCell>
                  <TableCell>{incident.status}</TableCell>
                  <TableCell>{format(new Date(incident.date), "yyyy-MM-dd")}</TableCell>
                  <TableCell>
                    <IconButton
                      color="primary"
                      onClick={() => handleOpenEdit(incident)}
                    >
                      <EditIcon />
                    </IconButton>
                    <IconButton
                      color="error"
                      onClick={() => {
                        setSelectedIncident(incident);
                        setDeleteDialog(true);
                      }}
                    >
                      <DeleteIcon />
                    </IconButton>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </Paper>

        {/* Create/Edit Modal */}
        <Dialog open={openModal || editModal} onClose={handleCloseModals}>
          <DialogTitle>
            {editModal ? "Editar Incidente" : "Crear Incidente"}
          </DialogTitle>
          <DialogContent>
            <TextField
              fullWidth
              label="Nombre"
              value={formData.name}
              onChange={(e) =>
                setFormData({ ...formData, name: e.target.value })
              }
              margin="normal"
            />
            <TextField
              fullWidth
              label="Descripción"
              value={formData.description}
              onChange={(e) =>
                setFormData({ ...formData, description: e.target.value })
              }
              margin="normal"
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={handleCloseModals}>Cancelar</Button>
            <Button onClick={handleSubmit} color="primary">
              Guardar
            </Button>
          </DialogActions>
        </Dialog>

        {/* Delete Confirmation Dialog */}
        <Dialog open={deleteDialog} onClose={() => setDeleteDialog(false)}>
          <DialogTitle>Confirmar eliminación</DialogTitle>
          <DialogContent>
            ¿Estás seguro de que deseas eliminar este incidente?
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setDeleteDialog(false)}>Cancelar</Button>
            <Button onClick={handleDelete} color="error">
              Eliminar
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </Box>
  );
};

export default Dashboard;